#!/usr/bin/env ruby

# Takes a binary file or hexdata string, and decodes it as a history page.


require 'minimed_rf'
require 'json'
require 'optparse'
require 'scanf'
require 'tempfile'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: mmhistory [options] [hexdata]"

  opts.on("-d", "--diff-with-decocare", "Compare output to decocare") do |v|
    options[:diff] = true
  end
  opts.on("-f", "--file=file", "Load data from file") do |v|
    options[:file] = v
  end
  opts.on("-p", "--pump=model", "Specify pump model. 522, 551, etc.") do |v|
    options[:model] = v
  end
  opts.on('-h', '--help', 'Displays Help') do
    puts opts
    exit
  end
end.parse!

def compare_attr(ctx, d_attr, m_attr, attr_name)
  if d_attr != m_attr
    puts "#{ctx}:#{attr_name} mismatch. decocare = #{d_attr.inspect}, minimed_rf = #{m_attr.inspect}"
    return false
  end
  true
end

def map_type_to_decocare_type(type)
  {
    "AlarmSensor" => "SensorAlert",
    "BolusWizardBolusEstimate" => "BolusWizard",
    "BolusNormal" => "Bolus",
    "ResultDailyTotal" => "MResultTotals",
    "JournalEntryPumpLowReservoir" => "LowReservoir",
    "Suspend" => "PumpSuspend",
    "Resume" => "PumpResume",
    "AlarmPump" => "NoDelivery",
  }[type] || type
end

def compare_to_decocare(records, file, model)
  #puts "Running: mm-decode-history-page.py --model=#{model} --collate #{file}"
  output = `/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/bin/mm-decode-history-page.py --model=#{model} --collate #{file} | egrep -v '(^#|^.end)'`
  ## Decocare sorts most recent first
  d_records = JSON.parse(output).reverse

  if d_records.count != records.count
    puts "Mismatch: #{d_records.count} decoded by decocare, #{records.count} by minimed_rf"
  end

  d_records.each_with_index do |dr, i|
    r = records[i]
    ctx = "record[#{i}]"

    if r.nil?
      puts "minimed_rf record = nil, decocare = #{dr.inspect}"
      next
    end

    # Compare type
    next unless compare_attr(ctx, dr["_type"], map_type_to_decocare_type(r["_type"]), "_type")
    ctx = "#{ctx}:#{dr["_type"]} - "
    r.delete("_type")
    dr.delete("_type")

    # Don't care about description
    r.delete("description")
    dr.delete("description")
    dr.delete("_description")
    dr.delete("unabsorbed_insulin_count")  # This seems to always be '??'

    # Compare data
    d_data = dr["_head"] + dr["_date"] + dr["_body"]
    if d_data != r["_raw"]
      puts "#{ctx} - data mismatch: decocare = #{dr["_head"].inspect} #{dr["_date"].inspect} #{dr["_body"].inspect}, minimed_rf = #{r["_raw"].inspect}"
    end
    dr.delete("_head")
    dr.delete("_date")
    dr.delete("_body")
    r.delete("_raw")

    keys = (r.keys + dr.keys).sort.uniq

    mismatch = false
    keys.each do |k|
      next if k[0] == "_"
      next if k[0..11] == "unknown_byte"

      if k == "appended"
        if dr["appended"].nil?
          puts "#{ctx}:appended/data mismatch. decocare missing appended key"
          mismatch = true
        elsif r["appended"].nil?
          puts "#{ctx}:appended/data mismatch. minimed_rf missing appended key"
          mismatch = true
        elsif dr["appended"][0]["data"] != r["appended"]["data"]
          puts "#{ctx}:appended/data mismatch. decocare = #{dr["appended"]["data"].inspect}, minimed_rf = #{r["appended"]["data"].inspect}"
          mismatch = true
        end
        next
      end

      if !compare_attr(ctx, dr[k], r[k], k)
        mismatch = true
      end
    end

    if mismatch
      # Look for carelink csv
      dir = File.dirname(file)
      csv_files = Dir.glob(dir + "/*.csv") + Dir.glob(dir + "/../*.csv")
      if csv_files.length > 0
        year, month, day, hour, min, sec = dr["timestamp"].scanf("%4d-%2d-%2dT%2d:%2d:%2d")
        carelink_timestamp = sprintf("%d/%d/%d %02d:%02d:%02d", month, day, year - 2000, hour, min, sec)
        puts `grep '#{carelink_timestamp}' #{csv_files.join(' ')}`
      end
      puts "====================================================="
    end

  end
end

if options[:file]
  data = File.read(options[:file])
else
  if ARGV.length > 0
    data = [ARGV[0]].pack('H*')
  else
    puts "Usage: mmhistory [options] [hexdata]"
    exit -1
  end
end
if options[:model]
  model_str = options[:model]
else
  model_str = '551'
end
model = MinimedRF::Models[model_str]
if model.nil?
  puts "Invalid pump model: #{model_str}"
end
history_page = MinimedRF::HistoryPage.new(data, model.new)
records = history_page.decode(nil, false).map(&:as_json)
if !options[:diff]
  puts JSON.pretty_generate(records)
else
  file = Tempfile.new('historypage')
  file.write(data)
  file.path
  file.close
  compare_to_decocare(JSON.parse(JSON.generate(records)), file.path, model_str)
  file.unlink
end
