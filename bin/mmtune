#!/usr/bin/env ruby

# This utility talks over a serial connection to a RileyLink that has been
# loaded with the subg_rfspy firmware (https://github.com/ps2/subg_rfspy)

# It attempts to query pump model many times to get an estimate of connection quality

require 'minimed_rf'
require 'minimed_rf/rfspy'

if ARGV.length < 2 || ARGV[1].length != 6
  puts "Usage: mmtune /dev/tty.usbserial-A9048LGG pumpserial"
  if ARGV.length > 1 && ARGV[1].length != 6
    puts "Error: pumpserial should be a six character id, like '55AB12'"
  end
  exit -1
end

pump_serial = ARGV[1]

class MMTune

  def initialize(path, pump_serial)
    @rx_channel = 0
    @tx_channel = 0
    @rx_timeout_ms = 80
    @pump_serial = pump_serial

    puts "Opening #{path}"
    @rf = MinimedRF::RFSpy.new(path)
    @rf.sync
  end

  def print_packet(p)
    if p.nil?
      puts "Nil packet!"
    else
      puts "#{Time.now.strftime('%H:%M:%S.%3N')} #{"%3d" % p.rssi} (#{"%3d" % p.sequence}): #{p}"
      #puts "raw: #{p.hex_data}"
    end
  end

  def wakeup
    # Try quick model check to see if pump is awake
    awake = false
    3.times do
      @rf.send_packet("a7" + @pump_serial + "8d00", @tx_channel)
      packet = @rf.get_packet(@rx_channel, 80)
      if packet
        print_packet(packet)
        awake = true
        break
      end
    end

    if !awake
      # Send 200 wake-up packets
      @rf.send_packet("a7" + @pump_serial + "5d00", @tx_channel, 200)
      wake_ack = @rf.get_packet(@rx_channel, 9000) # wait 9 s for response
      if wake_ack
        print_packet(wake_ack)
      else
        puts "Pump not responding"
      end
    end
  end

  def run_trial(var)
    sample_size = 5
    crc_error_count = 0
    timeout_count = 0
    valid_rssi_readings = []
    sample_size.times do
      @rf.send_packet("a7" + @pump_serial + "8d00", @tx_channel) # Get Model
      packet = @rf.get_packet(@rx_channel, 80)
      if packet.nil?
        timeout_count += 1
      elsif !packet.valid?
        crc_error_count += 1
      else
        valid_rssi_readings << packet.rssi
      end
    end
    avg_rssi = 0
    if valid_rssi_readings.length > 0
      avg_rssi = valid_rssi_readings.inject{ |sum, el| sum + el }.to_f / valid_rssi_readings.size
    end
    puts "#{var}, #{timeout_count}, #{crc_error_count+timeout_count}, rssi:%0.1f" % avg_rssi
  end

  def scan_over_freq(start_freq, end_freq, steps)
    step_size = (end_freq - start_freq) / steps
    cur_freq = start_freq
    while cur_freq < end_freq
      @rf.set_base_freq(cur_freq)
      run_trial("%0.3f" % cur_freq)
      cur_freq += step_size
    end
  end

  def scan_over_rx_bw
    bw_bits = 0xf
    while bw_bits > 0
      new_val = 0x09 | (bw_bits << 4)  # 0x09 = 16kbs data rate
      @rf.update_register(MinimedRF::RFSpy::REG_MDMCFG4, new_val)
      run_trial(bw_bits)
      bw_bits -= 1
    end
  end

  def scan_over_agc
    agc = 0x0
    while agc < 8
      @rf.update_register(MinimedRF::RFSpy::REG_AGCCTRL2, agc)
      run_trial(agc)
      agc += 1
    end
  end

  def scan_over_frend
    @rf.update_register(MinimedRF::RFSpy::REG_FREND1, 0xB6)
    run_trial("0xb6")
    @rf.update_register(MinimedRF::RFSpy::REG_FREND1, 0x56)
    run_trial("0x56")
  end

  def scan_over_rx_freq(range, base_freq, chanspc)
    range.each do |ch|
      @rx_channel = ch
      rx_freq = base_freq + ch * chanspc
      run_trial("rx%02d %0.2f" % [ch, rx_freq])
    end
  end

  def scan_over_tx_freq(range, base_freq, chanspc)
    range.each do |ch|
      @tx_channel = ch
      tx_freq = base_freq + ch * chanspc
      run_trial("tx%02d %0.2f" % [ch, tx_freq])
    end
  end

  def do_rxtx_spacing_test
    base_freq = 916.3
    chanspc = 30
    @rf.set_base_freq(base_freq)
    @rf.set_channel_spacing(chanspc,0x61) # 30 kHz
    @tx_channel = 11 # 916.63
    scan_over_rx_freq(0..20,base_freq,chanspc/1000.0)
    puts "="*30
    @rx_channel = 11 # 916.63
    scan_over_tx_freq(0..20,base_freq,chanspc/1000.0)
  end


  def run

    # Set rx bw to 150kHz and 16kbs data rate
    @rf.update_register(MinimedRF::RFSpy::REG_MDMCFG4, 0x99)

    # Pump in free space
    @rf.set_base_freq(916.630)

    # Sometimes getting lower ber with 0x07 here (default is 0x03)
    @rf.update_register(MinimedRF::RFSpy::REG_AGCCTRL2, 0x07)

    @rf.update_register(MinimedRF::RFSpy::REG_AGCCTRL1, 0x40)

    # With rx bw > 101kzHZ, this should be 0xB6, otherwise 0x56
    @rf.update_register(MinimedRF::RFSpy::REG_FREND1, 0xB6)

    # default (0x91) seems to work best
    #@rf.update_register(MinimedRF::RFSpy::REG_AGCCTRL0, 0x91)

    wakeup

    scan_over_freq(916.45, 916.75, 10)

    #do_rxtx_spacing_test
    #scan_over_rx_bw
    #scan_over_agc
    #scan_over_frend

    @rf.set_base_freq(916.630)
  end

end

tune = MMTune.new(ARGV[0], ARGV[1])
tune.run
