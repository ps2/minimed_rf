require 'spec_helper'

describe MinimedRF::HistoryPage do
  it "should decode 523 data" do
    data = "6ebf0f050000000000000002be02be640000000000000000000000000000000000000000000000000000000000000000000000007b0180de08010f11220006040c1e80c051410f0c0488c411010f7b018ac411010f11220006040c1eb1e651410f1a008fee11010f060303688fee71010f0c040e400001070c030f4000010764001f4000010717003740000107180080f616080f07000001efa18f0000006ea18f050000000000000001ef01ef64000000000000000000000000000000000000000000000000000000000000000000000000210084f616080f0b6b0080f736a80f030000002085f736080f7b0297f716080f2c1c007b0080c000090f001600070000001ea88f0036166ea88f0500000000000000001e001e6400000000000000000000000000000000006000000000000000000000000000c0000000b07b0180de08090f1122007b0280c016090f2c1c007b0080c0000a0f00160007000002bea98f0000006ea98f050000000000000002be02be640000000000000000000000000000000000000000000000000000000000000000000000007b0180de080a0f1122007b0280c0160a0f2c1c007b0080c0000b0f00160007000002beaa8f0000006eaa8f050000000000000002be02be640000000000000000000000000000000000000000000000000000000000000000000000007b0180de080b0f1122007b0280c0160b0f2c1c007b0080c0000c0f00160007000002beab8f0000006eab8f050000000000000002be02be640000000000000000000000000000000000000000000000000000000000000000000000007b0180de080c0f1122007b0280c0160c0f2c1c007b0080c0000d0f00160007000002beac8f0000006eac8f050000000000000002be02be640000000000000000000000000000000000000000000000000000000000000000000000007b0180de080d0f1122007b0280c0160d0f2c1c007b0080c0000e0f00160007000002bead8f0000006ead8f050000000000000002be02be640000000000000000000000000000000000000000000000000000000000000000000000007b0180de080e0f11220034649cf8140e0f0a6495fb340e0f5b64affb140e0f0f5000783c4100003200000000328c0100320032000000b0fb340e0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000095ba"
    history_page = MinimedRF::HistoryPage.new([data].pack('H*'))

    expect(history_page.crc_ok?).to eq true

    entries = history_page.decode
    expect(entries.length).to eq 51

    dailytotal = entries[0]
    # entry is for the last day of october,
    # but to follow decocare, we record timestamp
    # as midnight at the end of that day, which is
    # when the actual record is created
    expect(dailytotal.timestamp).to eq [2015, 11, 1, 0, 0, 0]
    expect(dailytotal.valid_date.month).to eq 10
    expect(dailytotal.valid_date.day).to eq 31


    calbg = entries[48]
    expect(calbg.to_s).to eq "CalBGForPH 2015-11-14T20:59:21 amount:100"

    bw = entries[49]
    expect(bw.blood_glucose).to eq 100
    expect(bw.bg_target_low).to eq 65
    expect(bw.bg_target_high).to eq 140
    expect(bw.unabsorbed_insulin_total).to eq 0
    expect(bw.correction_estimate).to eq 0
    expect(bw.bolus_estimate).to eq 1.25
    expect(bw.carb_ratio).to eq 12
    expect(bw.food_estimate).to eq 1.25
    expect(bw.carbohydrates).to eq 15
    expect(bw.insulin_sensitivity).to eq 60
  end

  it "should decode 523 bolus" do
    # capture7
    data = "41008ff9150f0f00560096f9550f0fdcdc002828560099f9350f0f282800dcdc6f129ef9150f0f6f21a3f9150f0f3364acf9150f0f081601acf9150f0f5000bbf9150f0f21011e003c14001e3c25c123b4460021011e003c14001e3c25c123b4450032009dc0160f0f61019dc0160f0f6a00a2c0160f0f6100a2c0160f0f3300b5d8160f0f081600b5d8160f0f7b02b5d8160f0f2c1c001e0195d9164f0f1f2089da164f0f7b0289da160f0f2c1c001e018de3164f0f1f2098e5164f0f7b0298e5160f0f2c1c000100080008000000a1d4570f0f50009fd5170f0f21011e003c14001e3c25c123b4450021011e003c14001e3c25c123b4440001000c000c000800aed5570f0f7b0080c000100f00160007000002ceaf8f0000006eaf8f050000000000000002ce02ba610014030000000000000000001400000002000000000000000000000000000000000000003202a5d300100f6101a5d300100f0100040004001000b6d340100f5732a1e800100f240ca7e820100fb39"
    history_page = MinimedRF::HistoryPage.new([data].pack('H*'), MinimedRF::Model523.new)

    expect(history_page.crc_ok?).to eq true

    entries = history_page.decode
    expect(entries.length).to eq 29

    bolus = entries[21]
    expect(bolus.amount).to eq 0.3
    expect(bolus.programmed_amount).to eq 0.3
    expect(bolus.duration).to eq 0
    expect(bolus.type).to eq "normal"
  end

  it "should decode 522 data" do
    data = "5c44020204040c04041604062004042a04043404043e04044804065204045c04046604047004067a04048404408e044e980456a20454c00420ca0450de04784214606a1401191900770b4e1c0f0a3642342e7c0f3f064234ce7c0f7834360b664f66112fbc0f5b005a27121c0f1a5006285a002b000000002b785c4104fa04060414680e14041814042214062c14043614044014044a14045414065e14046814047214047c14068614049014409a144ea41456ae1454cc1420d614012b2b005a27521c0f5b004111131c0f305006285a00500000000050785c3eac2604042014062a14683414043e14044814065214045c14046614047014047a14068414048e1404981404a21406ac1404b61440c0144eca1456d414012d2d004211931c0f5b004201171c0f1e500a285a001e000000001e785c4a060c04061604062004062a04063404063e04064804045204065c04066604067004067a04068404068e0406980406a20406ac0406b60406c00404ca0406d40446de0474e804ac0614012323084214b31c0f011e1e004201571c0f0a4e5629377c0f3f095629d77c0f78343607000008f65c0f6d5c0f05108a332906000008f6031c2305da4100ed05da4105125700c80d0000000a08020000508f4f3d1c050b65b7453b22bd0f0b65e4641b24bd0f0a4a6039247d8f3f296039447d0f7834365b4a6639041d0f00510a285a34000000000034785c2f025214065c147c6614067014067a14068414068e1406981406a21406ac1404b61406c01406ca1406d41406de14013434006639841d0f0b6525663925bd8f1e00712f061d0f1f00772f061d0f1e007301071d0f0b65e14c2227bd0f1f004828071d0f0aba4c29277d0f3f174c29477d0f7834365bba5929071d0f00500a285a100000000c0004785c087ea20452ac04010404005929871d0f5bba7530071d0f29500a285a102900000f002a785c0b1009047ea90452b304012a2a007630471d0f5b00763b071d0f1c500a285a001c000000001c785c0ea20a041614047eb40452be04011c1c00763b471d0f5b004e17091d0f1d500a285a001d000000001d785c11705404a25e041668047e0814521214011212004e17491d0f0b65b5511c2bbd0f5b006d2c0b1d0f305008285a003c000000003c785c1448910470e104a2eb0416f5047e9514529f14012828006d2c8b1d0f0b65f4453b2cbd0f5b00590d0d1d0f005008285a00000000000000785c2c040404060e04061804082204062c04063604084004064a04065404a25e0448ea04703a14a24414164e1401141404592fab1d0f01181800590d4d1d0f0b65f6641b2ebd0f0b650166392fbd8f5b006003111d0f005008285a0000000000000078000000000000000000000000000000000000000000000000000000000000000000000000c0cf"
    history_page = MinimedRF::HistoryPage.new([data].pack('H*'), MinimedRF::Model522.new)

    expect(history_page.crc_ok?).to eq true

    entries = history_page.decode
    expect(entries.length).to eq 47

    bolus = entries.first
    expect(bolus.amount).to eq 2.5
    expect(bolus.programmed_amount).to eq 2.5
    expect(bolus.duration).to eq 0
    expect(bolus.type).to eq "normal"

    bw = entries[4]
    expect(bw.blood_glucose).to eq 0
    expect(bw.bg_target_low).to eq 90
    expect(bw.bg_target_high).to eq 120
    expect(bw.insulin_sensitivity).to eq 40
    expect(bw.correction_estimate).to eq 0.0
    expect(bw.carbohydrates).to eq 26
    expect(bw.unabsorbed_insulin_total).to eq 0
    expect(bw.bolus_estimate).to eq 4.3
    expect(bw.carb_ratio).to eq 6
    expect(bw.food_estimate).to eq 4.3

    # square bolus
    bolus = entries[9]
    expect(bolus.amount).to eq 3.5
    expect(bolus.programmed_amount).to eq 3.5
    expect(bolus.duration).to eq 240
    expect(bolus.type).to eq "square"

  end
end
